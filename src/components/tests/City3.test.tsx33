import { render, screen } from '@testing-library/react';
import { useRouteHooksContext } from '../../context/RouteHooksContext';
import { useUWORouteContext } from '../../context/UWORouteContext';
import { fakeGoods } from '../../tests/fakeGoods';
import City from '../City';

jest.mock('../../context/UWORouteContext');

jest.mock('../../context/UWORouteContext', () => ({
  useUWORouteContext: jest.fn(() => ({
    citys: [1],
    coordinates: [1, 3],
    setCitys: jest.fn(),
    setCoordinates: jest.fn(),
    setEditable: jest.fn(),
    editable: true,
  })),
}));

jest.mock('../../Hooks/useCity', () => ({
  __esModule: true,
  goodsQuery: jest.fn(),
}));

describe('City component', () => {
  const mockUseUWORouteContext = useUWORouteContext as jest.MockedFunction<typeof useUWORouteContext>;
  beforeEach(() => {
    mockUseUWORouteContext.mockReturnValue({
      citys: [1],
      coordinates: [1, 3],
      setCitys: jest.fn(),
      setCoordinates: jest.fn(),
      setEditable: jest.fn(),
      editable: true,
    });
  });

  it('should render the city name', () => {
    const city = {
      city_id: 1,
      city_nm: 'Test City',
      city_coordinates: [0, 0],
    };

    render(<City route={{}} index={0} city={{ city_id: 1, city_nm: 'Seoul', city_coordinates: [37.5665, 126] }} />);
    const cityName = screen.getByText(city.city_nm);
    expect(cityName).toBeInTheDocument();
  });

  // it('should render the list of goods for the city', () => {
  //   const city = {
  //     city_id: 1,
  //     city_nm: 'Test City',
  //     city_coordinates: [0, 0],
  //   };
  //   render(<City index={0} city={city} />);
  //   const good1 = screen.getByAltText('test_good_1');
  //   const good2 = screen.getByAltText('test_good_2');
  //   expect(good1).toBeInTheDocument();
  //   expect(good2).toBeInTheDocument();
  // });

  // it('should not render the delete button if not in editable mode', () => {
  //   const city = {
  //     city_id: 1,
  //     city_nm: 'Test City',
  //     city_coordinates: [0, 0],
  //   };
  //   render(<City index={0} city={city} />);
  //   const deleteButton = screen.queryByTestId('delete-button');
  //   expect(deleteButton).not.toBeInTheDocument();
  // });

  // it('should render the delete button if in editable mode', () => {
  //   const city = {
  //     city_id: 1,
  //     city_nm: 'Test City',
  //     city_coordinates: [0, 0],
  //   };
  //   render(<City index={0} city={city} editable={true} />);
  //   const deleteButton = screen.getByTestId('delete-button');
  //   expect(deleteButton).toBeInTheDocument();
  // });
});
